name: CI/CD Pipeline for TypeScript API

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: 18

    steps:
      # Checkout do c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # Configurar a vers√£o do Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Instalar depend√™ncias
      - name: Install dependencies
        run: npm install

      # Executar testes unit√°rios
      - name: Run unit tests
        run: npm test

      # Construir a aplica√ß√£o
      - name: Build the application
        run: npm run build

    #   - name: Set Git identity
    #     run: |
    #       git config user.name "GitHub Actions"
    #       git config user.email "mauricio.ecamilo@gmail.com"

    #   # Criar uma tag automaticamente e empurr√°-la
    #   - name: Create Git tag
    #     run: |
    #       git tag -a v1.0.${{ github.run_number }} -m "Release v1.0.${{ github.run_number }}"

    # # Push da tag usando o GITHUB_TOKEN
    #   - name: Push Tag to GitHub
    #     run: |
    #       git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} v1.0.${{ github.run_number }}

    #   # Criar uma release no GitHub e anexar o artefato
    #   - name: Create GitHub Release
    #     uses: softprops/action-gh-release@v1
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     with:
    #       files: dist/**

      # # Notificar sucesso
      # - name: Notify success
      #   run: echo "üöÄ Release created successfully!"

      - name: Create Release Artifact
          run: |
            mkdir -p release
            cp -r dist/* release/ # Supondo que a sa√≠da da build esteja na pasta 'dist'

        - name: Upload Release Artifact
          uses: actions/upload-artifact@v2
          with:
            name: release-artifact
            path: release/

